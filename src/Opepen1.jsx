/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 opepen1.glb 
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { EffectComposer, SelectiveBloom } from "@react-three/postprocessing";
import { motion } from "framer-motion-3d";

export function Model(props) {
  const { nodes, materials } = useGLTF("../models/opepen2.glb");

  const [ringColor, setRingColor] = useState();
  const [ballAnim, setBallAnim] = useState(false);
  const [hovered, setHovered] = useState(false);

  const ref = useRef();
  const ball = useRef();
  const ring = useRef();
  const dLight = useRef();

  useEffect(() => {
    const link = document.querySelector('link[rel="icon"]');

    if (ball)
      if (ballAnim) {
        setTimeout(() => {
          setRingColor("#fff");
          link.setAttribute("href", "opepen-on.svg");
        }, [900]);
      } else {
        setRingColor("#333");
        link.setAttribute("href", "opepen-off.svg");
      }

    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [ball.current, ringColor, ballAnim, hovered]);

  console.log(ballAnim);
  console.log(ringColor);

  return (
    <group
      ref={ref}
      {...props}
      dispose={null}
      rotation={[0, Math.PI * 1.5, 0]}
      position={[0, -3, 1]}
    >
      {/* TOP */}
      <mesh
        geometry={nodes.top_.geometry}
        material={materials.Material}
        position={[0, 4, 0]}
        receiveShadow
        onClick={() => setBallAnim(!ballAnim)}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      />
      {/* RING LIGHT */}
      <mesh
        ref={ring}
        geometry={nodes.ring_light.geometry}
        material={materials["Material.001"]}
        position={[-2, 5, 1]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[1, 0.08, 1]}
        material-color={ringColor}
      />
      {/* CORNER */}
      <mesh
        geometry={nodes.Corner.geometry}
        material={materials["Material.003"]}
        position={[-1, 5, -1]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[1, 0.504, 1]}
      />
      {/* BOTTOM */}
      <mesh
        geometry={nodes.bottom.geometry}
        material={materials["Material.002"]}
        position={[-1, 0.5, 0]}
        scale={[2, 1, 4]}
      />
      {/* BALL */}
      <motion.mesh
        ref={ball}
        geometry={nodes.Sphere.geometry}
        material={materials["Material.004"]}
        position={[-1, 5, -1]}
        castShadow
        animate={{ z: ballAnim ? 1 : -1 }}
        transition={{
          ease: "easeInOut",
          duration: 0.8,
        }}
      />

      <directionalLight ref={dLight} castShadow intensity={0} />
      {ringColor === "#fff" && (
        <pointLight
          // rotation={[Math.PI * 0.25, 0, 0]}
          position={[-2, 5, 1]}
          intensity={3}
          color={"#FFF"}
        />
      )}

      {ringColor && (
        <EffectComposer>
          <SelectiveBloom lights={[dLight]} selection={[ring]} />
        </EffectComposer>
      )}
    </group>
  );
}

useGLTF.preload("../models/opepen2.glb");
